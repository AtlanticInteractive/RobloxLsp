{
    "config.color.mode": "Color mode.",
    "config.color.mode.Grammar": "Grammar color.",
<<<<<<< HEAD
    "config.color.mode.Semantic": "Semantic color (Testing. Your color theme must support semantic coloring to be effective.).",
    "config.misc.color3Picker": "Enable Color Picker and Preview for Color3 functions.",
    "config.misc.goToScriptLink": "If enabled, shows a link to the source script when requiring a module.",
    "config.completion.callSnippet": "Shows function call snippets or parentheses.",
    "config.completion.callSnippet.Both": "Shows `function name` and `call snippet`.",
    "config.completion.callSnippet.Disable": "Only shows `function name`.",
    "config.completion.callSnippet.Replace": "Only shows `call snippet.`",
    "config.completion.callSnippet.Parentheses": "Autocompletes parentheses.",
    "config.completion.displayContext": "Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to `0`, this feature can be disabled.",
    "config.completion.enable": "Enable completion.",
    "config.completion.endAutocompletion": "Enable on type `end` autocompletion like in Roblox Studio.\n\n(`editor.formatOnType` must be enabled to work.)",
    "config.completion.serverPort": "The port used to connect to the Roblox Studio Plugin. Set to 0 to disable.",
    "config.completion.fastAutocompletion": "Disable it if autocompletion doesn't work properly.",
=======
    "config.color.mode.Semantic": "Semantic color. You may need to set `editor.semanticHighlighting.enabled` to `true` to take effect.",
    "config.completion.callParenthesess": "Autocompletes function parentheses like in Roblox Studio.",
    "config.completion.displayContext": "Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to `0`, this feature can be disabled.",
    "config.completion.enable": "Enable completion.",
>>>>>>> origin/master
    "config.completion.keywordSnippet": "Shows keyword syntax snippets.",
    "config.completion.keywordSnippet.Both": "Shows `keyword` and `syntax snippet`.",
    "config.completion.keywordSnippet.Disable": "Only shows `keyword`.",
    "config.completion.keywordSnippet.Replace": "Only shows `syntax snippet`.",
<<<<<<< HEAD
    "config.develop.debuggerPort": "Listen port of debugger.",
    "config.develop.debuggerWait": "Suspend before debugger connects.",
    "config.develop.enable": "Developer mode. Do not enable, performance will be affected.",
    "config.diagnostics.disable": "Disabled diagnostic (Use code in hover brackets).\n```json\n\"Lua.diagnostics.disable\" : [\n    \"unused-local\",\n    \"lowercase-global\"\n]\n```\n",
    "config.diagnostics.enable": "Enable diagnostics.",
    "config.diagnostics.syntax": "Enable syntax errors. Disable it if you want to use Selene.",
    "config.diagnostics.datamodelAsIgnore": "Use datamodel.json as ignore list.",
    "config.diagnostics.globals": "Defined global variables.\n```json\n\"Lua.diagnostics.globals\" : [\n    \"GLOBAL1\",\n    \"GLOBAL2\"\n]\n```\n",
    "config.diagnostics.ignore": "Ignored instance members.\n```json\n\"Lua.diagnostics.ignore\" : [\n    \"NAME1\",\n    \"NAME2\"\n]\n```\n",
    "config.diagnostics.severity": "Modified diagnostic severity.\n```json\n\"Lua.diagnostics.severity\" : {\n    \"redefined-local\" : \"Warning\",\n    \"emmy-lua\" : \"Hint\"\n}\n```\n",
    "config.hover.enable": "Enable hover.",
    "config.hover.viewNumber": "Hover to view numeric content (only if literal is not decimal).",
    "config.hover.viewString": "Hover to view the contents of a string (only if the literal contains an escape character).",
    "config.hover.viewStringMax": "The maximum length of a hover to view the contents of a string.",
    "config.runtime.path": "`package.path`",
    "config.runtime.version": "Lua runtime version.",
    "config.signatureHelp.enable": "Enable signature help.",
    "config.workspace.ignoreDir": "Ignored directories (Use `.gitignore` grammar).\n```json\n\"Lua.workspace.ignoreDir\" : [\n    \"temp/*.*\",\n    \"!temp/*.lua\"\n]\n```\n",
    "config.workspace.ignoreSubmodules": "Ignore submodules.",
=======
    "config.completion.showParams": "Display parameters in completion list.",
    "config.completion.endAutocompletion": "Enable on type `end` autocompletion like in Roblox Studio.",
    "config.completion.workspaceWord": "Shows words within the workspace.",
    "config.completion.deprecatedMembers": "Shows deprecated members (Except duplicates).",
    "config.develop.debuggerPort": "Listen port of debugger.",
    "config.develop.debuggerWait": "Suspend before debugger connects.",
    "config.develop.enable": "Developer mode. Do not enable, performance will be affected.",
    "config.diagnostics.disable": "Disabled diagnostic (Use code in hover brackets).\n",
    "config.diagnostics.enable": "Enable diagnostics and syntax errors. Disabling this will not disable type checking.",
    "config.diagnostics.globals": "Defined global variables.\n",
    "config.diagnostics.neededFileStatus": "If you want to check only opened files, choice Opened; else choice Any.\n",
    "config.diagnostics.severity": "Modified diagnostic severity.\n",
    "config.diagnostics.workspaceDelay": "Latency (milliseconds) for workspace diagnostics. When you start the workspace, or edit any file, the entire workspace will be re-diagnosed in the background. Set to negative to disable workspace diagnostics.",
    "config.diagnostics.workspaceRate": "Workspace diagnostics run rate (%). Decreasing this value reduces CPU usage, but also reduces the speed of workspace diagnostics. The diagnosis of the file you are currently editing is always done at full speed and is not affected by this setting.",
    "config.hint.enable": "Enable inlay hints.",
    "config.hint.paramName": "Hint parameter names.",
    "config.hint.paramType": "Show type hints at the parameter of the function.",
    "config.hint.variableType": "Hint types at variables definitions.",
    "config.hint.setType": "Hint type at assignment operations.",
    "config.hint.returnType": "Hint return types at functions.",
    "config.hover.enable": "Enable hover.",
    "config.hover.enumsLimit": "When the value corresponds to multiple types, limit the number of types displaying.",
    "config.hover.fieldInfer": "When hovering to view a table, type infer will be performed for each field. When the accumulated time of type infer reaches the set value (MS), the type infer of subsequent fields will be skipped.",
    "config.hover.previewFields": "When hovering to view a table, limits the maximum number of previews for fields.",
    "config.hover.viewNumber": "Hover to view numeric content (only if literal is not decimal).",
    "config.hover.viewString": "Hover to view the contents of a string (only if the literal contains an escape character).",
    "config.hover.viewStringMax": "The maximum length of a hover to view the contents of a string.",
    "config.intelliSense.searchDepth": "Set the search depth for IntelliSense. Increasing this value increases accuracy, but decreases performance. Different workspace have different tolerance for this setting. Please adjust it to the appropriate value.",
>>>>>>> origin/master
    "config.workspace.rojoProjectFile": "The name of the .project.json file without the extension.",
    "config.workspace.loadMode": "What files should be preloaded.",
    "config.workspace.loadMode.allFiles": "Load all files in workspace.",
    "config.workspace.loadMode.rojoProject": "Load all files found in Rojo Project.",
<<<<<<< HEAD
    "config.workspace.library": "Load external library.\nThis feature can load external Lua files, which can be used for definition, automatic completion and other functions. Note that the language server does not monitor changes in external files and needs to restart if the external files are modified.\nThe following example shows loaded files in `C:/lua` and `../lib` ,exclude `../lib/temp`.\n```json\n\"Lua.workspace.library\": {\n    \"C:/lua\": true,\n    \"../lib\": [\n        \"temp/*\"\n    ]\n}\n```\n",
    "config.workspace.maxPreload": "Max preloaded files.",
    "config.workspace.preloadFileSize": "Skip files larger than this value (KB) when preloading.",
    "config.workspace.useGitIgnore": "Ignore files list in `.gitignore` .",
    "config.zzzzzz.cat": "DONT TOUCH ME, LET ME SLEEP >_<",
    "config.logging.showDebugMessages": "Shows debug messages in the output."
}
=======
    "config.misc.color3Picker": "Enable Color Picker and Preview for Color3 functions.",
    "config.misc.serviceAutoImport": "Suggests Roblox Services that can be auto imported.",
    "config.misc.goToScriptLink": "If enabled, shows a link to the source script when requiring a module.",
    "config.misc.parameters": "[Command line parameters](https://github.com/sumneko/lua-telemetry-server/tree/master/method) when starting the language service in VSCode.",
    "config.misc.serverPort": "The port used to connect to the Roblox Studio Plugin. Set to 0 to disable.",
    "config.runtime.fileEncoding": "File encoding. The `ansi` option is only available under the `Windows` platform.",
    "config.runtime.path": "`package.path`",
    "config.runtime.plugin": "(Proposed) Plugin path.",
    "config.signatureHelp.enable": "Enable signature help.",
    "config.signatureHelp.documentation": "Shows item documentation in signature help.",
    "config.window.progressBar": "Show progress bar in status bar.",
    "config.window.statusBar": "Show extension status in status bar.",
    "config.workspace.ignoreDir": "Ignored files and directories (Use `.gitignore` grammar).\n",
    "config.workspace.ignoreSubmodules": "Ignore submodules.",
    "config.workspace.library": "The directory path of the external function library.\nThe language service will additionally load the lua files in these directories, even if they are not in the current workspace, for definition, completion and other features.\n",
    "config.workspace.maxPreload": "Max preloaded files.",
    "config.workspace.preloadFileSize": "Skip files larger than this value (KB) when preloading.",
    "config.workspace.useGitIgnore": "Ignore files list in `.gitignore` .",
    "config.typeChecking.mode": "Type checking mode (BETA).",
    "config.typeChecking.mode.disabled": "Disable type checking.",
    "config.typeChecking.mode.nonStrict": "Only check types that can be known explicitly.",
    "config.typeChecking.mode.strict": "Try to infer unknown types from their use.",
    "config.typeChecking.options": "Type checking options.",
    "config.typeChecking.options.union-bivariance": "Accept an union if it can be converted to another type or vice-versa. When checking if it contains a field, ignore if it can't be found in other types in the union. Disabled by default.",
    "config.typeChecking.options.ignore-extra-fields": "Ignore any extra fields in a table in comparison to another. Disabled by default.",
    "config.typeChecking.options.infer-instance-from-unknown": "Infer `Instance` from unknown fields of Instance classes, or `Instance | any` if the type is specifically `Instance`. Disabled by default.",
    "config.typeChecking.options.recursive-get-type": "When getting the explicit type of a variable, if it doesn't have one, check its value and successively. This option does nothing in Strict mode. Enabled by default.",
    "config.typeChecking.showFullType": "Always show the full types in type checking errors. (`Array<string>` to `{[number]: string}`)",
    "config.zzzzzz.cat": "DONT TOUCH ME, LET ME SLEEP >_<"
}
>>>>>>> origin/master
